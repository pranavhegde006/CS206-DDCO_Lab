$date
	Mon Nov 16 20:18:24 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 1 ! busy $end
$var wire 16 " ab [15:0] $end
$var reg 8 # a [7:0] $end
$var reg 8 $ b [7:0] $end
$var reg 1 % clk $end
$var reg 1 & start $end
$scope module multiplier1 $end
$var wire 1 % clk $end
$var wire 8 ' mc [7:0] $end
$var wire 8 ( mp [7:0] $end
$var wire 1 & start $end
$var wire 8 ) sum [7:0] $end
$var wire 16 * prod [15:0] $end
$var wire 8 + difference [7:0] $end
$var wire 1 ! busy $end
$var reg 8 , A [7:0] $end
$var reg 8 - M [7:0] $end
$var reg 8 . Q [7:0] $end
$var reg 1 / Q_1 $end
$var reg 4 0 count [3:0] $end
$scope module adder $end
$var wire 8 1 a [7:0] $end
$var wire 8 2 b [7:0] $end
$var wire 1 3 cin $end
$var wire 8 4 out [7:0] $end
$upscope $end
$scope module subtracter $end
$var wire 8 5 a [7:0] $end
$var wire 8 6 b [7:0] $end
$var wire 1 7 cin $end
$var wire 8 8 out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 8
17
bx 6
bx 5
bx 4
03
bx 2
bx 1
bx 0
x/
bx .
bx -
bx ,
bx +
bx *
bx )
b10001 (
b11 '
1&
0%
b10001 $
b11 #
bx "
x!
$end
#5
b11111101 +
b11111101 8
b11111100 6
1!
b0 0
0/
b10001 .
b11 )
b11 4
b11 -
b11 2
b10001 "
b10001 *
b0 ,
b0 1
b0 5
1%
#10
0%
#15
1%
#20
0%
#25
1%
#30
0%
#35
1%
#40
0%
#45
1%
#50
0%
0&
#55
b1 0
b1 )
b1 4
b11111011 +
b11111011 8
b11111110 ,
b11111110 1
b11111110 5
b1111111010001000 "
b1111111010001000 *
b10001000 .
1/
1%
#60
0%
#65
b10 0
b11 )
b11 4
b11111101 +
b11111101 8
b0 ,
b0 1
b0 5
b11000100 "
b11000100 *
b11000100 .
0/
1%
#70
0%
#75
b11 0
b1100010 "
b1100010 *
b1100010 .
1%
#80
0%
#85
b100 0
b110001 "
b110001 *
b110001 .
1%
#90
0%
#95
b101 0
b1 )
b1 4
b11111011 +
b11111011 8
b11111110 ,
b11111110 1
b11111110 5
b1111111010011000 "
b1111111010011000 *
b10011000 .
1/
1%
#100
0%
#105
b110 0
b11 )
b11 4
b11111101 +
b11111101 8
b0 ,
b0 1
b0 5
b11001100 "
b11001100 *
b11001100 .
0/
1%
#110
0%
#115
b111 0
b1100110 "
b1100110 *
b1100110 .
1%
#120
0%
#125
0!
b1000 0
b110011 "
b110011 *
b110011 .
1%
#130
0%
1&
b111 $
b111 (
b111 #
b111 '
#135
b11111001 +
b11111001 8
b11111000 6
1!
b0 0
b111 "
b111 *
b111 .
b111 )
b111 4
b111 -
b111 2
1%
#140
0%
#145
1%
#150
0%
#155
1%
#160
0%
#165
1%
#170
0%
#175
1%
#180
0%
0&
#185
b1 0
b11 )
b11 4
b11110101 +
b11110101 8
b11111100 ,
b11111100 1
b11111100 5
b1111110010000011 "
b1111110010000011 *
b10000011 .
1/
1%
#190
0%
#195
b10 0
b101 )
b101 4
b11110111 +
b11110111 8
b11111110 ,
b11111110 1
b11111110 5
b1111111001000001 "
b1111111001000001 *
b1000001 .
1%
#200
0%
#205
b11 0
b110 )
b110 4
b11111000 +
b11111000 8
b11111111 ,
b11111111 1
b11111111 5
b1111111100100000 "
b1111111100100000 *
b100000 .
1%
#210
0%
#215
b100 0
b1010 )
b1010 4
b11111100 +
b11111100 8
b11 ,
b11 1
b11 5
b1100010000 "
b1100010000 *
b10000 .
0/
1%
#220
0%
#225
b101 0
b1000 )
b1000 4
b11111010 +
b11111010 8
b1 ,
b1 1
b1 5
b110001000 "
b110001000 *
b10001000 .
1%
#230
0%
#235
b110 0
b111 )
b111 4
b11111001 +
b11111001 8
b0 ,
b0 1
b0 5
b11000100 "
b11000100 *
b11000100 .
1%
#240
0%
#245
b111 0
b1100010 "
b1100010 *
b1100010 .
1%
#250
0%
#255
0!
b1000 0
b110001 "
b110001 *
b110001 .
1%
#260
0%
